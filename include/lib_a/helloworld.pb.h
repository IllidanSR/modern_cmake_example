// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: helloworld.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_helloworld_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_helloworld_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_helloworld_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_helloworld_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_helloworld_2eproto;
namespace db_package {
class StorageAddRequest;
class StorageAddRequestDefaultTypeInternal;
extern StorageAddRequestDefaultTypeInternal _StorageAddRequest_default_instance_;
class StorageAddResponse;
class StorageAddResponseDefaultTypeInternal;
extern StorageAddResponseDefaultTypeInternal _StorageAddResponse_default_instance_;
}  // namespace db_package
PROTOBUF_NAMESPACE_OPEN
template<> ::db_package::StorageAddRequest* Arena::CreateMaybeMessage<::db_package::StorageAddRequest>(Arena*);
template<> ::db_package::StorageAddResponse* Arena::CreateMaybeMessage<::db_package::StorageAddResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace db_package {

enum Status : int {
  OK = 0,
  NOT_OK = 1,
  Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Status_IsValid(int value);
constexpr Status Status_MIN = OK;
constexpr Status Status_MAX = NOT_OK;
constexpr int Status_ARRAYSIZE = Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Status_descriptor();
template<typename T>
inline const std::string& Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Status_descriptor(), enum_t_value);
}
inline bool Status_Parse(
    const std::string& name, Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Status>(
    Status_descriptor(), name, value);
}
// ===================================================================

class StorageAddRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:db_package.StorageAddRequest) */ {
 public:
  StorageAddRequest();
  virtual ~StorageAddRequest();

  StorageAddRequest(const StorageAddRequest& from);
  StorageAddRequest(StorageAddRequest&& from) noexcept
    : StorageAddRequest() {
    *this = ::std::move(from);
  }

  inline StorageAddRequest& operator=(const StorageAddRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StorageAddRequest& operator=(StorageAddRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StorageAddRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StorageAddRequest* internal_default_instance() {
    return reinterpret_cast<const StorageAddRequest*>(
               &_StorageAddRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StorageAddRequest& a, StorageAddRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StorageAddRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StorageAddRequest* New() const final {
    return CreateMaybeMessage<StorageAddRequest>(nullptr);
  }

  StorageAddRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StorageAddRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StorageAddRequest& from);
  void MergeFrom(const StorageAddRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StorageAddRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "db_package.StorageAddRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_helloworld_2eproto);
    return ::descriptor_table_helloworld_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestValueFieldNumber = 2,
    kMessageIdFieldNumber = 1,
    kTaskIdFieldNumber = 3,
  };
  // string request_value = 2;
  void clear_request_value();
  const std::string& request_value() const;
  void set_request_value(const std::string& value);
  void set_request_value(std::string&& value);
  void set_request_value(const char* value);
  void set_request_value(const char* value, size_t size);
  std::string* mutable_request_value();
  std::string* release_request_value();
  void set_allocated_request_value(std::string* request_value);
  private:
  const std::string& _internal_request_value() const;
  void _internal_set_request_value(const std::string& value);
  std::string* _internal_mutable_request_value();
  public:

  // int64 message_id = 1;
  void clear_message_id();
  ::PROTOBUF_NAMESPACE_ID::int64 message_id() const;
  void set_message_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_message_id() const;
  void _internal_set_message_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 task_id = 3;
  void clear_task_id();
  ::PROTOBUF_NAMESPACE_ID::int64 task_id() const;
  void set_task_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_task_id() const;
  void _internal_set_task_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:db_package.StorageAddRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_value_;
  ::PROTOBUF_NAMESPACE_ID::int64 message_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 task_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_helloworld_2eproto;
};
// -------------------------------------------------------------------

class StorageAddResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:db_package.StorageAddResponse) */ {
 public:
  StorageAddResponse();
  virtual ~StorageAddResponse();

  StorageAddResponse(const StorageAddResponse& from);
  StorageAddResponse(StorageAddResponse&& from) noexcept
    : StorageAddResponse() {
    *this = ::std::move(from);
  }

  inline StorageAddResponse& operator=(const StorageAddResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StorageAddResponse& operator=(StorageAddResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StorageAddResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StorageAddResponse* internal_default_instance() {
    return reinterpret_cast<const StorageAddResponse*>(
               &_StorageAddResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StorageAddResponse& a, StorageAddResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StorageAddResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StorageAddResponse* New() const final {
    return CreateMaybeMessage<StorageAddResponse>(nullptr);
  }

  StorageAddResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StorageAddResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StorageAddResponse& from);
  void MergeFrom(const StorageAddResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StorageAddResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "db_package.StorageAddResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_helloworld_2eproto);
    return ::descriptor_table_helloworld_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponseValueFieldNumber = 2,
    kMessageIdFieldNumber = 1,
    kTaskStatusFieldNumber = 3,
  };
  // string response_value = 2;
  void clear_response_value();
  const std::string& response_value() const;
  void set_response_value(const std::string& value);
  void set_response_value(std::string&& value);
  void set_response_value(const char* value);
  void set_response_value(const char* value, size_t size);
  std::string* mutable_response_value();
  std::string* release_response_value();
  void set_allocated_response_value(std::string* response_value);
  private:
  const std::string& _internal_response_value() const;
  void _internal_set_response_value(const std::string& value);
  std::string* _internal_mutable_response_value();
  public:

  // int64 message_id = 1;
  void clear_message_id();
  ::PROTOBUF_NAMESPACE_ID::int64 message_id() const;
  void set_message_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_message_id() const;
  void _internal_set_message_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .db_package.Status task_status = 3;
  void clear_task_status();
  ::db_package::Status task_status() const;
  void set_task_status(::db_package::Status value);
  private:
  ::db_package::Status _internal_task_status() const;
  void _internal_set_task_status(::db_package::Status value);
  public:

  // @@protoc_insertion_point(class_scope:db_package.StorageAddResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr response_value_;
  ::PROTOBUF_NAMESPACE_ID::int64 message_id_;
  int task_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_helloworld_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StorageAddRequest

// int64 message_id = 1;
inline void StorageAddRequest::clear_message_id() {
  message_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 StorageAddRequest::_internal_message_id() const {
  return message_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 StorageAddRequest::message_id() const {
  // @@protoc_insertion_point(field_get:db_package.StorageAddRequest.message_id)
  return _internal_message_id();
}
inline void StorageAddRequest::_internal_set_message_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  message_id_ = value;
}
inline void StorageAddRequest::set_message_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_message_id(value);
  // @@protoc_insertion_point(field_set:db_package.StorageAddRequest.message_id)
}

// string request_value = 2;
inline void StorageAddRequest::clear_request_value() {
  request_value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& StorageAddRequest::request_value() const {
  // @@protoc_insertion_point(field_get:db_package.StorageAddRequest.request_value)
  return _internal_request_value();
}
inline void StorageAddRequest::set_request_value(const std::string& value) {
  _internal_set_request_value(value);
  // @@protoc_insertion_point(field_set:db_package.StorageAddRequest.request_value)
}
inline std::string* StorageAddRequest::mutable_request_value() {
  // @@protoc_insertion_point(field_mutable:db_package.StorageAddRequest.request_value)
  return _internal_mutable_request_value();
}
inline const std::string& StorageAddRequest::_internal_request_value() const {
  return request_value_.GetNoArena();
}
inline void StorageAddRequest::_internal_set_request_value(const std::string& value) {
  
  request_value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void StorageAddRequest::set_request_value(std::string&& value) {
  
  request_value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:db_package.StorageAddRequest.request_value)
}
inline void StorageAddRequest::set_request_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:db_package.StorageAddRequest.request_value)
}
inline void StorageAddRequest::set_request_value(const char* value, size_t size) {
  
  request_value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:db_package.StorageAddRequest.request_value)
}
inline std::string* StorageAddRequest::_internal_mutable_request_value() {
  
  return request_value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StorageAddRequest::release_request_value() {
  // @@protoc_insertion_point(field_release:db_package.StorageAddRequest.request_value)
  
  return request_value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StorageAddRequest::set_allocated_request_value(std::string* request_value) {
  if (request_value != nullptr) {
    
  } else {
    
  }
  request_value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_value);
  // @@protoc_insertion_point(field_set_allocated:db_package.StorageAddRequest.request_value)
}

// int64 task_id = 3;
inline void StorageAddRequest::clear_task_id() {
  task_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 StorageAddRequest::_internal_task_id() const {
  return task_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 StorageAddRequest::task_id() const {
  // @@protoc_insertion_point(field_get:db_package.StorageAddRequest.task_id)
  return _internal_task_id();
}
inline void StorageAddRequest::_internal_set_task_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  task_id_ = value;
}
inline void StorageAddRequest::set_task_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_task_id(value);
  // @@protoc_insertion_point(field_set:db_package.StorageAddRequest.task_id)
}

// -------------------------------------------------------------------

// StorageAddResponse

// int64 message_id = 1;
inline void StorageAddResponse::clear_message_id() {
  message_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 StorageAddResponse::_internal_message_id() const {
  return message_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 StorageAddResponse::message_id() const {
  // @@protoc_insertion_point(field_get:db_package.StorageAddResponse.message_id)
  return _internal_message_id();
}
inline void StorageAddResponse::_internal_set_message_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  message_id_ = value;
}
inline void StorageAddResponse::set_message_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_message_id(value);
  // @@protoc_insertion_point(field_set:db_package.StorageAddResponse.message_id)
}

// string response_value = 2;
inline void StorageAddResponse::clear_response_value() {
  response_value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& StorageAddResponse::response_value() const {
  // @@protoc_insertion_point(field_get:db_package.StorageAddResponse.response_value)
  return _internal_response_value();
}
inline void StorageAddResponse::set_response_value(const std::string& value) {
  _internal_set_response_value(value);
  // @@protoc_insertion_point(field_set:db_package.StorageAddResponse.response_value)
}
inline std::string* StorageAddResponse::mutable_response_value() {
  // @@protoc_insertion_point(field_mutable:db_package.StorageAddResponse.response_value)
  return _internal_mutable_response_value();
}
inline const std::string& StorageAddResponse::_internal_response_value() const {
  return response_value_.GetNoArena();
}
inline void StorageAddResponse::_internal_set_response_value(const std::string& value) {
  
  response_value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void StorageAddResponse::set_response_value(std::string&& value) {
  
  response_value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:db_package.StorageAddResponse.response_value)
}
inline void StorageAddResponse::set_response_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  response_value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:db_package.StorageAddResponse.response_value)
}
inline void StorageAddResponse::set_response_value(const char* value, size_t size) {
  
  response_value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:db_package.StorageAddResponse.response_value)
}
inline std::string* StorageAddResponse::_internal_mutable_response_value() {
  
  return response_value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StorageAddResponse::release_response_value() {
  // @@protoc_insertion_point(field_release:db_package.StorageAddResponse.response_value)
  
  return response_value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StorageAddResponse::set_allocated_response_value(std::string* response_value) {
  if (response_value != nullptr) {
    
  } else {
    
  }
  response_value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), response_value);
  // @@protoc_insertion_point(field_set_allocated:db_package.StorageAddResponse.response_value)
}

// .db_package.Status task_status = 3;
inline void StorageAddResponse::clear_task_status() {
  task_status_ = 0;
}
inline ::db_package::Status StorageAddResponse::_internal_task_status() const {
  return static_cast< ::db_package::Status >(task_status_);
}
inline ::db_package::Status StorageAddResponse::task_status() const {
  // @@protoc_insertion_point(field_get:db_package.StorageAddResponse.task_status)
  return _internal_task_status();
}
inline void StorageAddResponse::_internal_set_task_status(::db_package::Status value) {
  
  task_status_ = value;
}
inline void StorageAddResponse::set_task_status(::db_package::Status value) {
  _internal_set_task_status(value);
  // @@protoc_insertion_point(field_set:db_package.StorageAddResponse.task_status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace db_package

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::db_package::Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::db_package::Status>() {
  return ::db_package::Status_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_helloworld_2eproto
