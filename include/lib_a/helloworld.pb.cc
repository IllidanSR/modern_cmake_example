// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: helloworld.proto

#include "helloworld.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace db_package {
class StorageAddRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StorageAddRequest> _instance;
} _StorageAddRequest_default_instance_;
class StorageAddResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StorageAddResponse> _instance;
} _StorageAddResponse_default_instance_;
}  // namespace db_package
static void InitDefaultsscc_info_StorageAddRequest_helloworld_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db_package::_StorageAddRequest_default_instance_;
    new (ptr) ::db_package::StorageAddRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db_package::StorageAddRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StorageAddRequest_helloworld_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StorageAddRequest_helloworld_2eproto}, {}};

static void InitDefaultsscc_info_StorageAddResponse_helloworld_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db_package::_StorageAddResponse_default_instance_;
    new (ptr) ::db_package::StorageAddResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db_package::StorageAddResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StorageAddResponse_helloworld_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StorageAddResponse_helloworld_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_helloworld_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_helloworld_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_helloworld_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_helloworld_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db_package::StorageAddRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db_package::StorageAddRequest, message_id_),
  PROTOBUF_FIELD_OFFSET(::db_package::StorageAddRequest, request_value_),
  PROTOBUF_FIELD_OFFSET(::db_package::StorageAddRequest, task_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db_package::StorageAddResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db_package::StorageAddResponse, message_id_),
  PROTOBUF_FIELD_OFFSET(::db_package::StorageAddResponse, response_value_),
  PROTOBUF_FIELD_OFFSET(::db_package::StorageAddResponse, task_status_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::db_package::StorageAddRequest)},
  { 8, -1, sizeof(::db_package::StorageAddResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::db_package::_StorageAddRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::db_package::_StorageAddResponse_default_instance_),
};

const char descriptor_table_protodef_helloworld_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020helloworld.proto\022\ndb_package\032\031google/p"
  "rotobuf/any.proto\"O\n\021StorageAddRequest\022\022"
  "\n\nmessage_id\030\001 \001(\003\022\025\n\rrequest_value\030\002 \001("
  "\t\022\017\n\007task_id\030\003 \001(\003\"i\n\022StorageAddResponse"
  "\022\022\n\nmessage_id\030\001 \001(\003\022\026\n\016response_value\030\002"
  " \001(\t\022\'\n\013task_status\030\003 \001(\0162\022.db_package.S"
  "tatus*\034\n\006Status\022\006\n\002OK\020\000\022\n\n\006NOT_OK\020\0012X\n\016S"
  "torageService\022F\n\003add\022\035.db_package.Storag"
  "eAddRequest\032\036.db_package.StorageAddRespo"
  "nse\"\000B\013\242\002\010NST_Taskb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_helloworld_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_helloworld_2eproto_sccs[2] = {
  &scc_info_StorageAddRequest_helloworld_2eproto.base,
  &scc_info_StorageAddResponse_helloworld_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_helloworld_2eproto_once;
static bool descriptor_table_helloworld_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_helloworld_2eproto = {
  &descriptor_table_helloworld_2eproto_initialized, descriptor_table_protodef_helloworld_2eproto, "helloworld.proto", 386,
  &descriptor_table_helloworld_2eproto_once, descriptor_table_helloworld_2eproto_sccs, descriptor_table_helloworld_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_helloworld_2eproto::offsets,
  file_level_metadata_helloworld_2eproto, 2, file_level_enum_descriptors_helloworld_2eproto, file_level_service_descriptors_helloworld_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_helloworld_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_helloworld_2eproto), true);
namespace db_package {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_helloworld_2eproto);
  return file_level_enum_descriptors_helloworld_2eproto[0];
}
bool Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void StorageAddRequest::InitAsDefaultInstance() {
}
class StorageAddRequest::_Internal {
 public:
};

StorageAddRequest::StorageAddRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db_package.StorageAddRequest)
}
StorageAddRequest::StorageAddRequest(const StorageAddRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_request_value().empty()) {
    request_value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.request_value_);
  }
  ::memcpy(&message_id_, &from.message_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&task_id_) -
    reinterpret_cast<char*>(&message_id_)) + sizeof(task_id_));
  // @@protoc_insertion_point(copy_constructor:db_package.StorageAddRequest)
}

void StorageAddRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StorageAddRequest_helloworld_2eproto.base);
  request_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&message_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&task_id_) -
      reinterpret_cast<char*>(&message_id_)) + sizeof(task_id_));
}

StorageAddRequest::~StorageAddRequest() {
  // @@protoc_insertion_point(destructor:db_package.StorageAddRequest)
  SharedDtor();
}

void StorageAddRequest::SharedDtor() {
  request_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StorageAddRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StorageAddRequest& StorageAddRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StorageAddRequest_helloworld_2eproto.base);
  return *internal_default_instance();
}


void StorageAddRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:db_package.StorageAddRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&message_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&task_id_) -
      reinterpret_cast<char*>(&message_id_)) + sizeof(task_id_));
  _internal_metadata_.Clear();
}

const char* StorageAddRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 message_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          message_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string request_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_request_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "db_package.StorageAddRequest.request_value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 task_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          task_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StorageAddRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:db_package.StorageAddRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 message_id = 1;
  if (this->message_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_message_id(), target);
  }

  // string request_value = 2;
  if (this->request_value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_value().data(), static_cast<int>(this->_internal_request_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "db_package.StorageAddRequest.request_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_request_value(), target);
  }

  // int64 task_id = 3;
  if (this->task_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_task_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db_package.StorageAddRequest)
  return target;
}

size_t StorageAddRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db_package.StorageAddRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string request_value = 2;
  if (this->request_value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_value());
  }

  // int64 message_id = 1;
  if (this->message_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_message_id());
  }

  // int64 task_id = 3;
  if (this->task_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_task_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StorageAddRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db_package.StorageAddRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StorageAddRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StorageAddRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db_package.StorageAddRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db_package.StorageAddRequest)
    MergeFrom(*source);
  }
}

void StorageAddRequest::MergeFrom(const StorageAddRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db_package.StorageAddRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.request_value().size() > 0) {

    request_value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.request_value_);
  }
  if (from.message_id() != 0) {
    _internal_set_message_id(from._internal_message_id());
  }
  if (from.task_id() != 0) {
    _internal_set_task_id(from._internal_task_id());
  }
}

void StorageAddRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db_package.StorageAddRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StorageAddRequest::CopyFrom(const StorageAddRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db_package.StorageAddRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StorageAddRequest::IsInitialized() const {
  return true;
}

void StorageAddRequest::InternalSwap(StorageAddRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  request_value_.Swap(&other->request_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(message_id_, other->message_id_);
  swap(task_id_, other->task_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StorageAddRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StorageAddResponse::InitAsDefaultInstance() {
}
class StorageAddResponse::_Internal {
 public:
};

StorageAddResponse::StorageAddResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db_package.StorageAddResponse)
}
StorageAddResponse::StorageAddResponse(const StorageAddResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  response_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_response_value().empty()) {
    response_value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.response_value_);
  }
  ::memcpy(&message_id_, &from.message_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&task_status_) -
    reinterpret_cast<char*>(&message_id_)) + sizeof(task_status_));
  // @@protoc_insertion_point(copy_constructor:db_package.StorageAddResponse)
}

void StorageAddResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StorageAddResponse_helloworld_2eproto.base);
  response_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&message_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&task_status_) -
      reinterpret_cast<char*>(&message_id_)) + sizeof(task_status_));
}

StorageAddResponse::~StorageAddResponse() {
  // @@protoc_insertion_point(destructor:db_package.StorageAddResponse)
  SharedDtor();
}

void StorageAddResponse::SharedDtor() {
  response_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StorageAddResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StorageAddResponse& StorageAddResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StorageAddResponse_helloworld_2eproto.base);
  return *internal_default_instance();
}


void StorageAddResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:db_package.StorageAddResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  response_value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&message_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&task_status_) -
      reinterpret_cast<char*>(&message_id_)) + sizeof(task_status_));
  _internal_metadata_.Clear();
}

const char* StorageAddResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 message_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          message_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string response_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_response_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "db_package.StorageAddResponse.response_value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .db_package.Status task_status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_task_status(static_cast<::db_package::Status>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StorageAddResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:db_package.StorageAddResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 message_id = 1;
  if (this->message_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_message_id(), target);
  }

  // string response_value = 2;
  if (this->response_value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_response_value().data(), static_cast<int>(this->_internal_response_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "db_package.StorageAddResponse.response_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_response_value(), target);
  }

  // .db_package.Status task_status = 3;
  if (this->task_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_task_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db_package.StorageAddResponse)
  return target;
}

size_t StorageAddResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db_package.StorageAddResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string response_value = 2;
  if (this->response_value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_response_value());
  }

  // int64 message_id = 1;
  if (this->message_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_message_id());
  }

  // .db_package.Status task_status = 3;
  if (this->task_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_task_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StorageAddResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db_package.StorageAddResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const StorageAddResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StorageAddResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db_package.StorageAddResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db_package.StorageAddResponse)
    MergeFrom(*source);
  }
}

void StorageAddResponse::MergeFrom(const StorageAddResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db_package.StorageAddResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.response_value().size() > 0) {

    response_value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.response_value_);
  }
  if (from.message_id() != 0) {
    _internal_set_message_id(from._internal_message_id());
  }
  if (from.task_status() != 0) {
    _internal_set_task_status(from._internal_task_status());
  }
}

void StorageAddResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db_package.StorageAddResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StorageAddResponse::CopyFrom(const StorageAddResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db_package.StorageAddResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StorageAddResponse::IsInitialized() const {
  return true;
}

void StorageAddResponse::InternalSwap(StorageAddResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  response_value_.Swap(&other->response_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(message_id_, other->message_id_);
  swap(task_status_, other->task_status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StorageAddResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace db_package
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::db_package::StorageAddRequest* Arena::CreateMaybeMessage< ::db_package::StorageAddRequest >(Arena* arena) {
  return Arena::CreateInternal< ::db_package::StorageAddRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::db_package::StorageAddResponse* Arena::CreateMaybeMessage< ::db_package::StorageAddResponse >(Arena* arena) {
  return Arena::CreateInternal< ::db_package::StorageAddResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
